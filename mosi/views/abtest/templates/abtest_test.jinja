{% extends "__base.jinja" %}
{% block body %}
    <style>
    .btn-outline-primary {
        color: white;
    }
    .btn-outline-primary:not(:disabled):not(.disabled):active, .btn-outline-primary:not(:disabled):not(.disabled).active, .show > .btn-outline-primary.dropdown-toggle {
        background-color: #00bc8c;
    }
    </style>

    <div class='row mb-3 mt-md-0 mt-n4 mb-5'>
        <div class='col-xl-6 col-md-8 offset-xl-3 offset-md-2 col-12'>
            <p class='text-center'>
                <span class='rounded-pill bg-secondary text-success px-2 py-1 mt-3'>
                    <span id='currentIndexSpan'></span>/<span id='totalIndexSpan'></span>
                </span>
            </p>
            <div class="progress">
                <div class="progress-bar bg-success" id='tokenProgress' role="progressbar"></div>
            </div>
        </div>
    </div>

    <div id="abtestUI">
        <div class='row'>
            <div class='col-xl-6 col-md-8 offset-xl-3 offset-md-2 col-12 mb-2'>
                {% if abtest.question %}
                    <h4 class="pt-2 text-center mb-5">{{ abtest.question }}</h4>
                {% endif %}
            </div>
            <div class='col-xl-6 col-md-8 offset-xl-3 offset-md-2 col-12 mb-2'>
                {% include 'abtest_token_card.jinja' %}
            </div>
        </div>
        {% if audio_data[0].tuple.has_reference %}
            <div class='row mt-2' id="reference-container">
                <div class='text-center mx-auto'>
                    <audio id="audio-recording" src={{audio_data[0].reference.url}} type="audio/wav"></audio>
                    <button type='button' id="play-ref" class='btn btn-success rounded-pill p-3 border abtest-border-thickness abtest-border-unfinished'>
                        <i id='playButtonIcon_ref' class='fa fa-play'></i> Samanburður
                    </button>
                </div>
            </div>
        {% else %}
            <div class='row mt-2' id="reference-container" style="visibility: hidden;">
                <div class='text-center mx-auto' >
                    <audio id="audio-recording" type="audio/wav"></audio>
                    <button type='button' id="play-ref" class='btn btn-success rounded-pill p-3 border abtest-border-thickness abtest-border-unfinished'>
                        <i id='playButtonIcon_ref' class='fa fa-play'></i> Samanburður
                    </button>
                </div>
            </div>
        {% endif %}
        <div class='row mt-2'>
            <div class='col-6 text-center'>
                <audio id="audio-recording" src={{audio_data[0].first.url}} type="audio/wav"></audio>
                <button type='button' id="play-first" class='btn btn-success rounded-pill p-3 border abtest-border-thickness abtest-border-unfinished'>
                    <i id='playButtonIcon_first' class='fa fa-play'></i> A
                </button>
            </div>
            <div class='col-6 text-center'>
                <audio id="audio-recording" src={{audio_data[0].second.url}} type="audio/wav"></audio>
                <button type='button' id="play-second" class='btn btn-success rounded-pill p-3 border abtest-border-thickness abtest-border-unfinished'>
                    <i id='playButtonIcon_second' class='fa fa-play'></i> B
                </button>
            </div>
        </div>

        <div class='my-4'>
            <div class="text-center h4">
                Velja hér:
            </div>
            <form class="text-center" id="ratingButtons">
                <div class="btn-group btn-group-toggle" data-toggle="buttons">
                    <label class="btn btn-outline-primary btn-xlg center-block border-success rounded-pill-left" id="label1" name="optionsLabel">
                        <input class="mx-3 ratingButton" type="radio" name="options" onchange="getRating(value)" id="option1" value="1">A
                    </label>
                    <label class="btn btn-outline-primary btn-xlg center-block border-success rounded-pill-right" id="label2" name="optionsLabel">
                        <input class="mx-3 ratingButton" type="radio" name="options" onchange="getRating(value)" id="option2" value="2">B
                    </label>
                </div>
            </form>
        </div>
    </div>
    <div class='row'>
        <div class='col-xl-6 col-md-8 offset-xl-3 offset-md-2 col-12 controls mb-3 d-flex justify-content-between'>
            <button id='prev' class='btn btn-sm btn-secondary rounded-pill' type='button'>
                <i class='fa fa-arrow-left mr-1 ml-1'></i>
                <span class='font-weight-bold mr-1'>Fyrri</span>
            </button>

            <button id='next' class='btn btn-sm btn-secondary rounded-pill' type='button'>
                <span class='font-weight-bold ml-1 mr-1'>Næsti</span>
                <i class='fa fa-arrow-right mr-1'></i>
            </button>

            <button type='submit' id='send' type='button' class='btn btn-success rounded-pill float-right'>
                Klára
                <i id='finishButtonIcon' class='ml-2 fa fa-arrow-right'></i>
            </button>
        </div>
    </div>
    {% if abtest.help_text %}
        <div class='col-xl-6 col-md-8 offset-xl-3 offset-md-2 col-12 mt-5 mb-4'>
            <p class="">{{ abtest.help_text }}</p>
        </div> 
    {% endif %}
{% endblock %}

{% block scripts %}
    {{super()}}
    <script src='{{url_for("main.static", filename="js/error.js")}}'></script>
    <script type='text/javascript'>
        var postRatingsRoute = "{{url_for('abtest.post_abtest_rating', id=abtest.id)}}";
        var user_id = {{user.id}};
        var abtest_id = {{abtest.id}}
        var audio_json = {{audio_json}}
    </script>
    <script>
        'use strict';
        window.onbeforeunload = function() {
            return "Are you sure?";
        };
        window.onload = function(){
            setRatingsButtonsOff()
        }
        let mediaRecorder;
        let recorderSettings;
        let audioCtx;
        let recordedBlobs;
        let streamProcessor;
        let ws;
        let micSurfer;
        let stream;
        let meter;

        var abtestIndex = 0; // At what utterance are we now?
        var numABTuples = audio_json.length;

        //token stuff
        const tokenText = document.querySelector("#tokenText");
        const tokenIDSpan = document.querySelector("#tokenID");
        const tokenHref= document.querySelector("#tokenHref");
        const tokenfileIDSpan = document.querySelector("#tokenFileID");
        const tokenProgress = document.querySelector('#tokenProgress');
        const currentIndexSpan = document.querySelector('#currentIndexSpan');
        const totalIndexSpan = document.querySelector('#totalIndexSpan');
        const tokenCard = document.querySelector('#tokenCard');

        //buttons
        const nextButton = document.querySelector('button#next');
        const prevButton = document.querySelector('button#prev');
        const playButtonFirst = $('button#play-first');
        const playButtonSecond = $('button#play-second');
        const playButtonRef = $('button#play-ref');
        const finishButton = document.querySelector('button#send');
        const finishButtonIcon = $('#finishButtonIcon');

        //radio
        const ratingButtons = document.getElementById('ratingButtons')

        //audio
        let recordingAudio = document.querySelector('audio#audio-recording');
        let playButtonIcon_first = $('#playButtonIcon_first');
        let playButtonIcon_second = $('#playButtonIcon_second');
        let playButtonIcon_ref = $('#playButtonIcon_ref');
        //other
        const referenceContainer = $('#reference-container');

        const startTime = new Date();


        // ------------- register listeners ------------
        nextButton.addEventListener('click', nextAction);
        prevButton.addEventListener('click', prevAction);

        

        playButtonFirst.on('click', {btn_num: 'first'}, playAction);
        playButtonSecond.on('click', {btn_num: 'second'}, playAction);
        playButtonRef.on('click', {btn_num: 'reference'}, playAction);
        finishButton.addEventListener('click', finishAction);
        $(window).keyup(function (e) {
            if (e.key === ' ' || e.key === 'Spacebar'  || e.keyCode === 38 || e.keyCode === 87) {
                // spacebar, arrow-up or "w"
                e.preventDefault()
                playAction();
            } else if(e.keyCode === 65){ //"a"
                prevAction();
            } else if(e.keyCode === 68){ //"d"
                nextAction();
            } else if(e.keyCode === 40 || e.keyCode === 83){ // arrow-down or "s"
                playAction();
            }
        });

        // ---------------- Actions --------------------
        function nextAction(){
            // Increment the sentence index and update the UI
            stopPlayingAll();
            if(abtestIndex < numABTuples - 1 && !nextButton.disabled){
                abtestIndex += 1;
                $( "#abtestUI" ).animate({
                    opacity: 0.0
                    }, 200, function() {
                        updateUI();
                });
            }
        }

        function prevAction(){
            stopPlayingAll();
            // Decrement the sentence index and update the UI
            if(abtestIndex > 0){
                abtestIndex -= 1;
                $( "#abtestUI" ).animate({
                    opacity: 0.0
                    }, 200, function() {
                        updateUI();
                });
            }
        }

        function stopPlayingAll(){
            if(isPlaying){
                //stop
                isPlaying = false;
                playButtonIcon_first.removeClass('fa-stop').addClass('fa-play');
                playButtonIcon_second.removeClass('fa-stop').addClass('fa-play');
                if (audio_json[abtestIndex]['reference']){
                    playButtonIcon_ref.removeClass('fa-stop').addClass('fa-play');
                }
                audio.pause();
                audio.currentTime = 0;
            }
        }

        function playAction(event){
            var btn = event.data.btn_num
            // Play the recording for the sentence at the current index.
            recordingAudio.src = audio_json[abtestIndex][btn]['url']
            if(btn == 'reference'){
                play(audio_json[abtestIndex][btn].id, btn)
            }
            else{
                if(audio_json[abtestIndex]['invert_A_B_arrangement']){
                    if(btn == 'first'){
                        recordingAudio.src = audio_json[abtestIndex]['second']['url']
                        play(audio_json[abtestIndex]['second'].id, btn)
                    }
                    if(btn == 'second'){
                        recordingAudio.src = audio_json[abtestIndex]['first']['url']
                        play(audio_json[abtestIndex]['first'].id, btn)
                    }
                }
                else{
                    play(audio_json[abtestIndex][btn].id, btn)
                }
            }
            
        }

        var isPlaying = false;
        var currentId;
        var audio;

        function getRating(value){

            audio_json[abtestIndex]['rating'] = value
            if(audio_json[abtestIndex]['invert_A_B_arrangement']){
                if(value == '1'){
                    audio_json[abtestIndex]['rating'] = '2'
                }
                if(value == '2'){
                    audio_json[abtestIndex]['rating'] = '1'
                }
            }
            //updateUI();
            setButtonUI();
            setFinishButtonUI();
        }

        function setRatingsButtonsStatus(){
            if (audio_json[abtestIndex]['reference']){
                if(audio_json[abtestIndex]['first']['is_played'] && audio_json[abtestIndex]['second']['is_played'] && audio_json[abtestIndex]['reference']['is_played']){
                    setRatingsButtonsOn()
                }
            }
            else{
                if(audio_json[abtestIndex]['first']['is_played'] && audio_json[abtestIndex]['second']['is_played']){
                    setRatingsButtonsOn()
                }
            }
        }

        function setRatingsButtonsOn(){
            $("#ratingButtons").css('opacity', 1);
            var buttons = document.getElementsByClassName("ratingButton");
            for(var i = 0; i < buttons.length; i++){
                $(buttons[i]).prop('disabled', false);
            }
        }

        function setRatingsButtonsOff(){
            $("#ratingButtons").css('opacity', 0.2);
            var buttons = document.getElementsByClassName("ratingButton");
            for(var i = 0; i < buttons.length; i++){
                $(buttons[i]).prop('disabled', true);
            }
        }
        function play(id, btn){
            var playButtonIcon_btn = playButtonIcon_first
            if (btn == 'first'){
                playButtonIcon_btn = playButtonIcon_first
            }
            else if(btn == "second"){
                playButtonIcon_btn = playButtonIcon_second
            }
            else if (btn == "reference"){
                playButtonIcon_btn = playButtonIcon_ref
            }

            else {
                return 0
            }
            audio_json[abtestIndex][btn]['is_played'] = true;
            if(isPlaying){
                //stop
                stopPlayingAll()
                isPlaying = false;
                //playButtonIcon_btn.removeClass('fa-stop').addClass('fa-play');
                
                //audio.pause();
                //audio.currentTime = 0;
                // play the other clip if another id was chosen
                if(id !== currentId){
                    play(id, btn);
                }
            } else{

                //start
                //isPlaying = true;
                currentId = id;
                audio = recordingAudio;
                // set listeners
                audio.onplaying = function(){
                    isPlaying = true;
                }
                audio.onpause = function(){
                    isPlaying = false;
                }
                audio.onended = function(){
                    playButtonIcon_btn.removeClass('fa-stop').addClass('fa-play');
                    
                    //setRatingsButtonsStatus();
                    //setButtonUI();
                    //setFinishButtonUI();
                    updateUI();
                }
                // play audio
                playButtonIcon_btn.removeClass('fa-play').addClass('fa-stop');
                audio.play();
            }
            updateUI();
        }
        function finishAction(){
            finishButtonIcon.removeClass('fa-arrow-right').addClass('fa-spinner').addClass('fa-spin');
            var xhr = new XMLHttpRequest();
            xhr.onload = function(e) {
                if(this.readyState === XMLHttpRequest.DONE) {
                    finishButtonIcon.removeClass('fa-spinner').removeClass('fa-spin');
                    if(xhr.status == '200'){
                        // if we finish we go straight to the session
                        var abtest_url = xhr.responseText;
                        finishButtonIcon.addClass('fa-check');

                        window.onbeforeunload = null;
                        window.location = abtest_url;
                    } else{
                        finishButtonIcon.addClass('fa-times');
                        finishButton.classList.add('btn-danger');
                        promptError("Villa koma upp við að senda upptökur", xhr.responseText,"");
                    }
                }
                finishButton.disabled = true;
            };
            for(var i = 0; i < audio_json.length; i++){
                audio_json[i]['placement'] = i + 1
            }
            var fd = new FormData();
            fd.append('duration', JSON.stringify((new Date().getTime() - startTime.getTime())/1000));
            fd.append('user_id', user_id);
            fd.append('abtest_id', abtest_id);
            fd.append('abtest_list', JSON.stringify(audio_json));
            xhr.open("POST", postRatingsRoute, true);
            xhr.send(fd);
        }


        // ---------------- UI configuration --------------------
        async function updateUI(){
            setTokenUI();
            setProgressUI(abtestIndex + 1);
            setButtonUI();
            setBorderUI()
            setFinishButtonUI();
            setRadioUI();
            setReferenceUI();
            $( "#abtestUI" ).animate({
                opacity: 1.0
            }, 300);
        }

        function setBorderUI(){
            var btns = [playButtonFirst, playButtonSecond, playButtonRef]
            for(let i = 0; i < btns.length; i++){
                btns[i].removeClass("abtest-border-unfinished");
                btns[i].removeClass("abtest-border-finished");
            }
            if(audio_json[abtestIndex]['tuple']['has_ref']){
                if(audio_json[abtestIndex]['reference']['is_played']){
                    playButtonRef.addClass("abtest-border-finished");
                }
                else{
                    playButtonRef.addClass("abtest-border-unfinished");
                }
            }
            //if(audio_json[abtestIndex]['invert_A_B_arrangement']){
            if(false){
                if(audio_json[abtestIndex]['first']['is_played']){
                    playButtonSecond.addClass("abtest-border-finished");
                }
                else{
                    playButtonSecond.addClass("abtest-border-unfinished");
                }
                if(audio_json[abtestIndex]['second']['is_played']){
                    playButtonFirst.addClass("abtest-border-finished");
                }
                else{
                    playButtonFirst.addClass("abtest-border-unfinished");
                }
            }
            else{
                if(audio_json[abtestIndex]['first']['is_played']){
                        playButtonFirst.addClass("abtest-border-finished");
                }
                else{
                    playButtonFirst.addClass("abtest-border-unfinished");
                }
                if(audio_json[abtestIndex]['second']['is_played']){
                    playButtonSecond.addClass("abtest-border-finished");
                }
                else{
                    playButtonSecond.addClass("abtest-border-unfinished");
                }
            }            
        }

        function setReferenceUI(){
            if(audio_json[abtestIndex]['tuple']['has_ref']){
                $(referenceContainer).css('visibility','visible')
            }
            else{
                $(referenceContainer).css('visibility','hidden')
            }
        }

        function setProgressUI(i){
            var ratio = (i / numABTuples) * 100;
            tokenProgress.style.width = `${ratio.toString()}%`;
            currentIndexSpan.innerHTML = i;
        }


        function setTokenUI(){
            tokenText.innerHTML = audio_json[abtestIndex]['token']['text'];
            if (audio_json[abtestIndex]['token'] != null){
                tokenfileIDSpan.innerHTML = '#' + audio_json[abtestIndex]['token']['id'];
                tokenHref.href = audio_json[abtestIndex]['token']['url'];
            }
            else{
                tokenfileIDSpan.innerHTML = ''
                tokenHref.href = ''
            }
        };

        function setRadioUI(){
            var label1 = document.getElementById('label1');
            var label2 = document.getElementById('label2');
            var labels = [label1, label2]
            for(let i = 0; i < labels.length; i++){
                labels[i].classList.remove("active");
            }
            if(audio_json[abtestIndex]['rating']){
                if(audio_json[abtestIndex]['invert_A_B_arrangement']){
                    if(audio_json[abtestIndex]['rating'] == 1){
                        labels[1].classList.add("active");
                    }
                    if(audio_json[abtestIndex]['rating'] == 2){
                        labels[0].classList.add("active");
                    }
                }
                else{
                    labels[audio_json[abtestIndex]['rating']-1].classList.add("active");
                }
            }
            if(audio_json[abtestIndex]['tuple']['has_ref']){
                if(audio_json[abtestIndex]['first']['is_played'] && audio_json[abtestIndex]['second']['is_played'] && audio_json[abtestIndex]['reference']['is_played']){
                    setRatingsButtonsOn()
                }
            }
            else{
                if(audio_json[abtestIndex]['first']['is_played'] && audio_json[abtestIndex]['second']['is_played']){
                    setRatingsButtonsOn()
                }
                else{
                    setRatingsButtonsOff()
                }
            }
            /*
            if(abtest_list[abtestIndex]['rating']){
                ratingButtons.options[abtest_list[abtestIndex]['rating']].checked=true;
            }
            else{
                for(let i = 0; i < ratingButtons.options.length; i++){
                    ratingButtons.options[i].checked = false;
                }
            }
            */
        }

        function setButtonUI(){
            prevButton.disabled = false;
            nextButton.disabled = false;
            nextButton.style.display = "";
            if (abtestIndex == 0) {
                prevButton.disabled = true;
            }
            if (audio_json[abtestIndex]['reference']){
                if(!audio_json[abtestIndex]['first']['is_played'] || !audio_json[abtestIndex]['second']['is_played'] || !audio_json[abtestIndex]['reference']['is_played']){
                    nextButton.disabled = true;
                }
            }
            else{
                //if (!audio_json[abtestIndex]['first']['is_played'] || !audio_json[abtestIndex]['second']['is_played']) {
                if (!check_if_tuples_are_rated(abtestIndex+1)) {
                    nextButton.disabled = true;
                }
            }
            
            if (abtestIndex == numABTuples -1) {
                nextButton.disabled = true;
                nextButton.style.display = "none"
            }

            
        }

        function check_if_tuples_are_rated(upto=null){
            var finished = true;
            if(!upto){
                upto = audio_json.length
            }
            for(var i = 0; i < upto; i++){
                if (!('rating' in audio_json[i])){
                    finished = false;
                    break;
                }
            }
            return finished
        }

        function check_if_tuples_are_played(){
            var finished = true;
            for(var i = 0; i < audio_json.length; i++){
                if (!('rating' in audio_json[i])){
                    finished = false;
                    break;
                }
            }
            return finished
        }

        function setFinishButtonUI(){
            //if (abtestIndex == numABTuples -1 && (!audio_json[abtestIndex]['first']['is_played'] || !audio_json[abtestIndex]['second']['is_played'])) {
            if (abtestIndex == numABTuples -1 && (!check_if_tuples_are_rated())) {
                finishButton.disabled = true;
                finishButton.style.display = "";
            } else if (abtestIndex == numABTuples -1 && check_if_tuples_are_rated()) {
                finishButton.disabled = false;
                finishButton.style.display = "";
            } else {
                finishButton.disabled = true;
                finishButton.style.display = "none";
            }
            return false;
        }

        function setLiveUI(type){
            switch(type){
                case 'wait':
                    tokenCard.style.borderWidth = '2px';
                    tokenCard.classList.remove('border-success');
                    tokenCard.classList.add('border-warning');
                    skipButton.disabled = true;
                    nextButton.disabled = true;
                    prevButton.disabled = true;
            }
        }

        // --------------------- Initialize UI --------------------------
        totalIndexSpan.innerHTML = numABTuples;
        updateUI();

    </script>
{% endblock %}