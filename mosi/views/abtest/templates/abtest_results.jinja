{% extends "__base.jinja" %}
{% block headscripts %}
    {{super()}}
    <script src="https://cdn.plot.ly/plotly-latest.min.js" charset="utf-8"></script>
{% endblock %}
{% block body %}
    <div class='row'>
        <div class='col-12'>
            <h1 class='font-weight-bold'>Niðurstöður fyrir abtest#{{abtest.id}}</h1>
        </div>

        <div class='col-12 mb-4'>
            <a href='{{url_for("abtest.download_abtest_data", abtest_id=abtest.id)}}'
               class='btn btn-primary btn-sm float-right mr-2 mt-2'
               target="_blank" download="abtest_data_{{abtest.id}}.tsv"
               >
                {{macros.btn_icon('download', 'r')}}
                Sækja gögn
            </a>
        </div>

        <div class='col-md-6 col-12'>
            <div class='row'>
                <div class='col-6'><p>Fjöldi einkunna:</p></div>
                <div class='col-6 text-right'><p>{{ratings | length}}</p></div>

                <div class='col-6'><p>Fjöldi notenda:</p></div>
                <div class='col-6 text-right'><p>{{users | length }}</p></div>

                <div class='col-6'><p>Fjöldi setninga:</p></div>
                <div class='col-6 text-right'><p>{{abtest_list | length}}</p></div>
            </div>
        </div>
        <div class='col-md-6 col-12'>
            <div class='row'>
                <div class='col-6'><p>Búð til:</p></div>
                <div class='col-6 text-right'><p>{{abtest.created_at | datetime(format='low')}}</p></div>

                <div class='col-6'><p>Placeholder:</p></div>
                <div class='col-6 text-right'><p>??</p></div>

                <div class='col-6'><p>Placeholder:</p></div>
                <div class='col-6 text-right'><p>??</p></div>
            </div>
        </div>
    </div>


    <div class="wrapper">
        <div style="background-color: #303030; padding-left: 8px;" data-toggle="collapse" data-target="#collapse-users" aria-expanded="false" aria-controls="collapse-users" style="cursor: pointer;">
            <p class="py-2 text-success"><i class="fas fa-plus mr-2" aria-hidden="true"></i> Notendur</p>
        </div>
        <div class="collapse" id="collapse-users">
            {% if users|length > 0 %}
                {% with users=users %}
                    {% include 'abtest_users_table.jinja'%}
                {% endwith %}
            {% endif %}
        </div>
    </div>

    <div class="wrapper" style="margin-top: 10px;">
        <div style="background-color: #303030; padding-left: 8px;" data-toggle="collapse" data-target="#collapse-ratings" aria-expanded="false" aria-controls="collapse-ratings" style="cursor: pointer;">
             <p class="py-2 text-success"><i class="fas fa-plus mr-2" aria-hidden="true"></i> Setningar</p>
        </div>
        <div class="collapse" id="collapse-ratings">
            {% if abtest_list|length > 0 %}
                {% with abtest_list=abtest_list %}
                    {% include 'abtest_results_instances_table.jinja'%}
                {% endwith %}
            {% endif %}
        </div>
    </div>

    {% if per_voice_data.x |length > 1 %}
        <div class="wrapper" style="margin-top: 10px;">
            <div style="background-color: #303030; padding-left: 8px;" data-toggle="collapse" data-target="#collapse-voices" aria-expanded="false" aria-controls="collapse-ratings" style="cursor: pointer;">
                <p class="py-2 text-success"><i class="fas fa-plus mr-2" aria-hidden="true"></i> Raddir</p>
            </div>
            <div class="collapse" id="collapse-voices">
                {% if per_voice_data|length > 0 %}
                    {% with per_voice_data=per_voice_data %}
                        {% include 'abtest_results_voices_table.jinja'%}
                    {% endwith %}
                {% endif %}
            </div>
        </div>
    {% endif %}

    {% if model_voice_data |length > 0 %}
        <div class="wrapper" style="margin-top: 10px;">
            <div style="background-color: #303030; padding-left: 8px;" data-toggle="collapse" data-target="#collapse-models" aria-expanded="false" aria-controls="collapse-ratings" style="cursor: pointer;">
                <p class="py-2 text-success"><i class="fas fa-plus mr-2" aria-hidden="true"></i> Módel</p>
            </div>
            <div class="collapse" id="collapse-models">
                {% if model_voice_data|length > 0 %}
                    {% with model_voice_data=model_voice_data %}
                        {% include 'abtest_results_models_table.jinja'%}
                    {% endwith %}
                {% endif %}
            </div>
        </div>
    {% endif %}

    <div class='col-12' style="margin-top: 50px;">
        <h3 class='font-weight-bold'>Samanburðir setninga</h3>
        <p>Hver stöpull sýnir meðaleinkunn ákveðinnar seningar frá öllum notendum</p>
        <div class='card'>
            <div class='card-body'>
                <div id='bar-chart-sentence'>
                </div>
            </div>
        </div>
    </div>



    <div class="form-group" style="margin-top: 50px; margin-bottom: 50px;">
        <label id="labelmodel1Select">Veldu Módel</label>
        <select class="form-control" id="model1Select">
            <option>Módel</option>
            {% for model, value in model_voice_data.items() %}
                <option>{{model}}</option>
            {% endfor %}
        </select>

        <div id="containerVoice1Select" class='d-none'>
            <label id="labelvoice1Select">Veldu rödd</label>
            <select class="form-control" id="voice1Select">

            </select>
        </div>

        <div id="containerModel2Select" class='d-none'>
            <p class="h4 my=5" style="margin-top: 20px;">
                Borið saman við
            </p>
            <label id="labelmodel2Select">Veldu módel</label>
            <select class="form-control" id="model2Select">
        
            </select>
        </div>

        <div id="containerVoice2Select" class='d-none'>
            <label id="labelvoice2select">Veldu rödd</label>
            <select class="form-control" id="voice2select">

            </select>
        </div>
    </div>

    <div id="containerModelVoicePlot" class='col-12 d-none' style="margin-top: 50px;">
        <h3 class='font-weight-bold'>Samanburðir modela </h3>
        <p>Hver stöpull sýnir...</p>
        <div class='card'>
            <div class='card-body'>
                <div id='bar-chart-models'>
                </div>
            </div>
        </div>
    </div>
    <!--
    <div class='col-12' style="margin-top: 50px;">
        <h3 class='font-weight-bold'>Notendahegðun</h3>
        <p>Hver lína sýnir einkunnagjöf ákveðins notenda fyrir þær upptökur sem sem hlustandi hefur hlýtt á. Hægt er að velja sérstakan notanda til að skoða með meðaltal allra notenda til hliðsjónar. Það er einnig hægt að velja hvaða notendur eru sjáanlegir með því að smella á notendurna hægra megin við grafið.</p>
        <div class='card'>
            <div class='card-body'>
                <div class="row">
                    <div class="col-1 ml-5 mr-5">
                        <div class="row mb-3">
                           Notandi:
                        </div>
                    </div>
                    <div class="col">
                        <div class="row mb-3">
                            <select class="allUsers"></select>
                        </div>
                    </div>
                </div>
                <div id='all-users-line'>
                </div>
            </div>
        </div>
    </div>


    <div class='col-12' style="margin-top: 50px;">
        <h3 class='font-weight-bold'>Meðaleinkunn setninga</h3>
        <p>Hver stöpull sýnir meðaleinkunn ákveðinnar seningar frá öllum notendum</p>
        <div class='card'>
            <div class='card-body'>
                <div id='bar-chart'>
                </div>
            </div>
        </div>
    </div>

    <div class='col-12' style="margin-top: 50px;">
        <h3 class='font-weight-bold'>Fjöldi einkunna á setningu</h3>
        <p>Hver stöpull sýnir fjölda einkunna sem hver sening hefur</p>
        <div class='card'>
            <div class='card-body'>
                <div id='bar-chart-total-number'>
                </div>
            </div>
        </div>
    </div>

    <div class='col-12' style="margin-top: 50px;">
        <h3 class='font-weight-bold'>Röð einkunna</h3>
        <p>
            Hver stöpull sýnir meðaleinkunn eftir því hvenær einkunn er gefin. Þannig sýnir fyrsti
            stöpull meðaleinkunn þeirra einkunna sem gefnar voru fyrst og svo koll af kolli.
        </p>
        <div class='card'>
            <div class='card-body'>
                <div id='bar-chart-placement'>
                </div>
            </div>
        </div>
    </div>

    <div class='col-12' style="margin-top: 50px;">
        <h3 class='font-weight-bold'>Meðaleinkunn radda</h3>
        <p>
            Hver stöpull sýnir meðaleinkunn eftir rödd.
        </p>
        <div class='card'>
            <div class='card-body'>
                <div id='bar-chart-voice'>
                </div>
            </div>
        </div>
    </div>
    -->

{% endblock %}

{% block modals %}

    <div class="modal fade" id='deleteUserRatingsModal' tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Þú ert við það að eyða endurgjöfum notenda!</h5>
                <button type="button" class="close" data-dismiss="modal">
                <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>
                    Með því að eyða þessari línu fremur þú alheimssglæp.
                </p>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Loka</button>
                <a id='confirmationButton' href='{{url_for("abtest.delete_ratings_by_user", abtest_id=1, user_id=1)}}' class='btn btn-danger'>
                    Eyða
                    {{macros.btn_icon('trash', 'l')}}
                </a>
            </div>
            </div>
        </div>
    </div>

{% endblock %}


{% block scripts %}
    {{super()}}

    <script>

        var model_voice_data = {{model_voice_data}}
        var current_model1 = 'Model1'
        var current_voice1 = 'Voice1'
        var current_model2 = 'Model2'
        var current_voice2 = 'Moice2'
        var containerVoice1 = $('#containerVoice1Select')
        var containerModel2 = $('#containerModel2Select')
        var containerVoice2 = $('#containerVoice2Select')
        var containerModelVoicePlot = $('#containerModelVoicePlot')


        $(document).ready(function () {
            $('.collapse')
                .on('shown.bs.collapse', function() {
                    $(this)
                        .parent()
                        .find(".fa-plus")
                        .removeClass("fa-plus")
                        .addClass("fa-minus");
                })
                .on('hidden.bs.collapse', function() {
                    $(this)
                        .parent()
                        .find(".fa-minus")
                        .removeClass("fa-minus")
                        .addClass("fa-plus");
                });
        });


    
        function deleteUserRatingsButton(id){
            $('#deleteUserRatingsModal #confirmationButton').attr('href', '{{url_for("abtest.delete_ratings_by_user", abtest_id=abtest.id, user_id=1)}}'.replace("user_ratings/1/abtest","user_ratings/<int:user_id>/abtest".replace('<int:user_id>', id)));
        }

        var config = {
            responsive: true
        }
        var data = [];

        //var users = {{users_graph_json}}
        //var placement = {{placement_info}}
        var abtest_stats = {{abtest_stats}}
        var container_bar = document.getElementById('bar-chart-sentence');

        var trace1 = {
            x: abtest_stats['ratio'],
            y: abtest_stats['names'],
            name: 'Valið',
            orientation: 'h',
            type: 'bar',
            marker: {
                color: 'rgba(255,153,51,0.6)',
                width: 1
            }
        };

        var trace2 = {
            x: abtest_stats['ratio_inverse'],
            y: abtest_stats['names'],
            name: 'Ekki valið',
            orientation: 'h',
            type: 'bar',
            marker: {
                color: 'rgba(55,128,191,0.6)',
                width: 1
            }
        };

        data = [trace1, trace2]
        var layout_bar_sentences = {
            title: 'Setningar',
            barmode: 'stack'
        };

        Plotly.newPlot(container_bar, data, layout_bar_sentences, config);

        function plot_model_voice(values1, values2, names, split_names1, split_names2){
            var config = {
            responsive: true
            }
            var data = [];

            var abtest_stats = {{abtest_stats}}

            var container_bar = document.getElementById('bar-chart-models');

            var trace1 = {
                x: values1,
                y: names,
                name: '',
                orientation: 'h',
                type: 'bar',
                text: split_names1,
                marker: {
                    color: 'rgba(255,153,51,0.6)',
                    width: 1
                }
            };

            var trace2 = {
                x: values2,
                y: names,
                name: '',
                orientation: 'h',
                text: split_names2,
                type: 'bar',
                marker: {
                    color: 'rgba(55,128,191,0.6)',
                    width: 1
                }
            };

            data = [trace1, trace2]
            var layout_bar_sentences = {
                title: 'Model vs...',
                barmode: 'stack',
                showlegend: false,
                xaxis:{
                    title:{
                        text: 'Prósenta valin',
                    },
                    range: [0,100]
                }
            };

            Plotly.newPlot(container_bar, data, layout_bar_sentences, config);
        }

        function populateSelect(list_element, data){
            //var list = document.getElementById("projectSelectorDropdown"); 
            var keys = get_keys_of_dict(data);
            list_element.find('option').remove()

            list_element.append(`<option value="Veldu">Veldu</option>`);
            for(var key in keys){
                var optionValue = keys[key];
                var optionText = keys[key];
                list_element.append(`<option value="${optionValue}"> ${optionText} </option>`);
            }
        }
        
        
        function get_keys_of_dict(dict){
            var keys = [];

            for (var key in dict) {
                if (dict.hasOwnProperty(key)) {
                    keys.push(key);
                }
            }
            return keys
        }

        function get_model_voice_plot_data(data, name1, name2){
            first_positive = (Math.round((data['positive'] / data['total'])*100) / 100) * 100
            second_positive = 100 - first_positive
            return [[first_positive], [second_positive], [name1 + ' vs ' + name2], [name1], [name2]]
        }

        function get_every_model_vs_model(data){
            var return_data = [[], [], [], [], []]
            for (var key in data) {
                if (data.hasOwnProperty(key)) {
                    model_data = get_model_voice_plot_data(data[key], current_model1, key)
                    return_data[0].push(model_data[0][0])
                    return_data[1].push(model_data[1][0])
                    return_data[2].push(model_data[2][0])
                    return_data[3].push(model_data[3][0])
                    return_data[4].push(model_data[4][0])
                }
            }
            return return_data
        }

        $('#model1Select').change(function(){
            nextSelect = $('#voice1Select')
            containerModelVoicePlot.removeClass('d-none')
            containerVoice1.removeClass('d-none')
            containerModel2.addClass('d-none')
            containerVoice2.addClass('d-none')
            current_model1 = $(this).val()
            populateSelect(nextSelect, model_voice_data[current_model1])
            
            plot_data = get_every_model_vs_model(model_voice_data[current_model1]['model_v_model'])
            plot_model_voice(plot_data[0], plot_data[1], plot_data[2], plot_data[3], plot_data[4])
        })

        $('#voice1Select').change(function(){
            current_voice1 = $(this).val()
            if(current_voice1 == 'model_v_all'){
                plot_data = get_model_voice_plot_data(model_voice_data[current_model1][current_voice1], current_model1, 'All models')
                plot_model_voice(plot_data[0], plot_data[1], plot_data[2], plot_data[3])
                containerModel2.addClass('d-none')
                containerVoice2.addClass('d-none')
            }
            else{
                nextSelect = $('#model2Select')
                containerModel2.removeClass('d-none')
                containerVoice2.addClass('d-none')
                
                populateSelect(nextSelect, model_voice_data[current_model1][current_voice1])
            }
        })

        $('#model2Select').change(function(){
            current_model2 = $(this).val()
            if(current_voice1 == 'model_v_model'){
                plot_data = get_model_voice_plot_data(model_voice_data[current_model1][current_voice1][current_model2], current_model1, current_model2)
                plot_model_voice(plot_data[0], plot_data[1], plot_data[2], plot_data[3])
            }
            else{
            nextSelect = $('#voice2select')
            containerVoice2.removeClass('d-none')
            populateSelect(nextSelect, model_voice_data[current_model1][current_voice1][current_model2])
            }
        })

        $('#voice2select').change(function(){
            current_voice2 = $(this).val()
            plot_data = get_model_voice_plot_data(model_voice_data[current_model1][current_voice1][current_model2][current_voice2], current_model1 + current_voice1, current_model2 + current_voice2)
            plot_model_voice(plot_data[0], plot_data[1], plot_data[2], plot_data[3])
        })
        
        /*
        function assignOptions(textArray, selector) {
            for (var i = 0; i < textArray.length;  i++) {
                var currentOption = document.createElement('option');
                currentOption.text = textArray[i];
                selector.appendChild(currentOption);
            }
        }

        var names = {{all_usernames_list}}
        var names_len = names.unshift('Allir notendur')
        setBubblePlot(names[0]);
        function setBubblePlot(chosenName) {

           var layout = {
                plot_bgcolor: 'rgba(0, 0, 0, 0)',
                paper_bgcolor: 'rgba(0, 0, 0, 0)',
                margin: {
                    'l': 30,
                    'r': 30,
                    't': 30,
                    'b': 30
                },
                font: {
                    family: 'Courier New, monospace',
                    size: 12,
                    color: '#4d4d4d'
                },
                yaxis:{
                    title:{
                        text: 'Einkunn'
                    },
                    range: [0,5]
                },
                xaxis:{
                    title:{
                        text: 'Drykkur'
                    },
                    type: 'category',
                    tickmode:'linear'
                }
            };
            var config = {
                responsive: true
            }
            var data = [];
            if(chosenName == "Allir notendur"){
                var users = {{users_graph_json}}
                var placement = {{placement_info}}
                var abtest_stats = {{abtest_stats}}
                users.forEach( user => {
                    var trace = {
                        x: {{abtest_stats}}['names'],
                        y: user.user_ratings.ratings,
                        visible: 'legendonly',
                        fill: 'scatter',
                        marker: {
                            size: 12
                        },
                        connectgaps: true,
                        name: user.user_ratings.username
                    };
                    
                    data.push(trace)
                });
                var trace2 = {
                    x: {{abtest_stats}}['names'],
                    y: {{abtest_stats}}['means'],
                    fill: 'scatter',
                    marker: {
                        size: 12
                    },
                    connectgaps: true,
                    name: 'Meðaltal allra notenda'
                };
                data.push(trace2)
            }
            else{
                var trace = {
                    x: {{user_name_dict}}[chosenName]['selectiveabtestIds'],
                    y: {{user_name_dict}}[chosenName]['selectiveRatings'],
                    fill: 'scatter',
                    marker: {
                        size: 12
                    },
                    connectgaps: true,
                    name: chosenName
                };
                data.push(trace)
                var trace2 = {
                    x: {{user_name_dict}}[chosenName]['selectiveabtestIds'],
                    y: {{user_name_dict}}[chosenName]['selectiveabtestMeans'],
                    fill: 'scatter',
                    marker: {
                        size: 12
                    },
                    connectgaps: true,
                    name: 'Meðaltal allra notenda'
                };
                data.push(trace2)

            }
            Plotly.newPlot('all-users-line', data, layout, config);
        };
        
        var userSelector = document.querySelector('.allUsers');

        assignOptions(names, userSelector);
        
        function updateBubbleLine(){
            setBubblePlot(userSelector.value);
        }
        userSelector.addEventListener('change', updateBubbleLine, false);



        // next
        var width;
        var container = document.getElementById('line-chart');
        var layout = {
            plot_bgcolor: 'rgba(0, 0, 0, 0)',
            paper_bgcolor: 'rgba(0, 0, 0, 0)',
            margin: {
                'l': 30,
                'r': 30,
                't': 30,
                'b': 30
            },
            font: {
                color: 'white'
            },
            yaxis:{
                title:{
                    text: 'Einkunn'
                }
            },
            xaxis:{
                title:{
                    text: 'Setning'
                },
                tickmode:'linear'
            }
        };
        var config = {
            responsive: true
        }
        var data = [];

        var users = {{users_graph_json}}
        var placement = {{placement_info}}
        var abtest_stats = {{abtest_stats}}

        var container_bar = document.getElementById('bar-chart');
        var layout_bar = {
            plot_bgcolor: 'rgba(0, 0, 0, 0)',
            paper_bgcolor: 'rgba(0, 0, 0, 0)',
            margin: {
                'l': 30,
                'r': 30,
                't': 30,
                'b': 30
            },
            font: {
                color: 'white'
            },
            yaxis:{
                title:{
                    text: 'Meðaleinkunn'
                },
                range: [0,5]
            },
            xaxis:{
                title:{
                    text: 'Setning'
                },
                tickmode: 'linear'
            }
        };
        //set max width on each bar
        if(abtest_stats['names'].length > 4){
            width = Array(abtest_stats['names'].length).fill(0.9);
        }
        else{
            width = Array(abtest_stats['names'].length).fill(0.2);
        }
        var trace1 = {
            x: abtest_stats['names'],
            y: abtest_stats['means'],
            name: 'Meðaleinkunn',
            type: 'bar',
            marker: {
                color: '#00bc8c'
            },
            width:width
        };

        var data = [trace1];

        Plotly.newPlot(container_bar, data, layout_bar, config);

        var container_bar = document.getElementById('bar-chart-total-number');
        var y_scale_max = Math.max(5, Math.max.apply(Math, abtest_stats['total_amount']))
        var layout_bar = {
            plot_bgcolor: 'rgba(0, 0, 0, 0)',
            paper_bgcolor: 'rgba(0, 0, 0, 0)',
            margin: {
                'l': 30,
                'r': 30,
                't': 30,
                'b': 30
            },
            font: {
                color: 'white'
            },
            yaxis:{
                title:{
                    text: 'Fjöldi'
                },
                range: [0, y_scale_max]

            },
            xaxis:{
                title:{
                    text: 'Setning'
                },
                tickmode: 'linear'
            }
        };
        //set max width on each bar
        if(abtest_stats['names'].length > 4){
            width = Array(abtest_stats['names'].length).fill(0.9);
        }
        else{
            width = Array(abtest_stats['names'].length).fill(0.2);
            //width = []
            //for(var i = 0; i < abtest_stats['names'].length; i++){
            //    var nw = 0.9/abtest_stats['names'].length
            //    var col_width = Math.min(1, 1)
            //    width.push(col_width)
            //}
        }

        var trace1 = {
            x: abtest_stats['names'],
            y:  abtest_stats['total_amount'],
            name: 'Fjöldi einkunna',
            type: 'bar',
            marker: {
                color: '#00bc8c'
            },
            width:width
        };

        var data = [trace1];

        Plotly.newPlot(container_bar, data, layout_bar, config);

        var container_bar_placement = document.getElementById('bar-chart-placement');
        var layout_bar = {
            barmode: 'group',
            plot_bgcolor: 'rgba(0, 0, 0, 0)',
            paper_bgcolor: 'rgba(0, 0, 0, 0)',
            margin: {
                'l': 30,
                'r': 30,
                't': 30,
                'b': 30
            },
            font: {
                color: 'white'
            },
            yaxis:{
                title:{
                    text: 'Meðaleinkunn'
                },
                range: [0,5]

            },
            xaxis:{
                title:{
                    text: 'Númer einkunnargjafar'
                },
                tickmode: 'linear'
            }
        };
        //set max width on each bar
        if(placement['placement'].length > 4){
            width = Array(abtest_stats['names'].length).fill(0.9);
        }
        else{
            width = Array(abtest_stats['names'].length).fill(0.3);
        }


        var trace1 = {
            x: placement['p_nums'],
            y: placement['placement'],
            name: 'Meðaleinkunn',
            type: 'bar',
            marker: {
                color: '#00bc8c'
            },
            width: width
        };


        var data = [trace1];

        Plotly.newPlot(container_bar_placement, data, layout_bar, config);

        var container_bar_voices = document.getElementById('bar-chart-voice');
        var voice_data = {{per_voice_data}};
        var voice_trace = {
            x: voice_data['x'],
            y: voice_data['y'],
            name: 'Meðaleinkunn',
            type: 'bar',
            marker: {
                color: '#00bc8c'
            },
            width: width
        };
        var layout_bar = {
            barmode: 'group',
            plot_bgcolor: 'rgba(0, 0, 0, 0)',
            paper_bgcolor: 'rgba(0, 0, 0, 0)',
            margin: {
                'l': 30,
                'r': 30,
                't': 30,
                'b': 30
            },
            font: {
                color: 'white'
            },
            yaxis:{
                title:{
                    text: 'Meðaleinkunn'
                },
                range: [0,5]

            },
            xaxis:{
                title:{
                    text: 'Rödd'
                },
                tickmode: 'linear'
            }
        };
        Plotly.newPlot(container_bar_voices, [voice_trace], layout_bar, config);
        */

    </script>
{% endblock %}